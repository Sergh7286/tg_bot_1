import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {
        "state": "awaiting_player_count"
    }
    keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤", callback_data="choose_players")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤.", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in user_data:
        user_data[user_id] = {"state": "awaiting_player_count"}

    data = user_data[user_id]

    if query.data == "choose_players":
        data["state"] = "awaiting_player_count"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (—á–∏—Å–ª–æ):")

    elif query.data == "remove_command":
        if data.get("state") != "showing_result":
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.")
            return
        removed_any = False
        for name in data["names"]:
            assigned = data["assigned_teams"].get(name, [])
            removed = data["removed_teams"].get(name, [])
            not_removed = [cmd for cmd in assigned if cmd not in removed]
            if not_removed:
                cmd_to_remove = random.choice(not_removed)
                removed.append(cmd_to_remove)
                data["removed_teams"][name] = removed
                removed_any = True
        if not removed_any:
            await query.answer("–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ —É–¥–∞–ª–µ–Ω—ã.")
            return

        text = format_result(data)
        keyboard = [
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="remove_command")],
            [InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)

    elif query.data == "restart":
        user_data[user_id] = {"state": "awaiting_player_count"}
        keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤", callback_data="choose_players")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤.", reply_markup=reply_markup)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    if user_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return

    data = user_data[user_id]

    if data.get("state") == "awaiting_player_count":
        if not text.isdigit() or int(text) < 1:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤ (–±–æ–ª—å—à–µ 0).")
            return
        data["player_count"] = int(text)
        data["names"] = []
        data["state"] = "awaiting_names"
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ {data['player_count']} –∏–≥—Ä–æ–∫–æ–≤, –ø–æ –æ–¥–Ω–æ–º—É –∏–º–µ–Ω–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

    elif data.get("state") == "awaiting_names":
        name_lower = text.lower()
        if name_lower == "–ø–µ—Ç—É—Ö":
            await update.message.reply_text("–°–∞–Ω—è –ü–ï–°")
            user_data[user_id] = {"state": "awaiting_player_count"}
            await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (—á–∏—Å–ª–æ):")
            return

        if len(data["names"]) < data["player_count"]:
            if name_lower in ["—Å–∞–Ω—è", "—Å–∞—à–∞"]:
                display_name = "–ü–ï–° üê∂üêï"
            else:
                display_name = text
            data["names"].append(display_name)
            if len(data["names"]) == data["player_count"]:
                data["state"] = "awaiting_teams_count"
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—á–∏—Å–ª–æ):")
            else:
                await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ ‚Ññ{len(data['names'])+1}:")
        else:
            await update.message.reply_text("–í—ã —É–∂–µ –≤–≤–µ–ª–∏ –≤—Å–µ –∏–º–µ–Ω–∞.")

    elif data.get("state") == "awaiting_teams_count":
        if not text.isdigit() or int(text) < 1:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∏–≥—Ä–æ–∫–∞ (–±–æ–ª—å—à–µ 0).")
            return
        data["teams_per_player"] = int(text)
        data["teams"] = []
        data["state"] = "awaiting_teams"
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ {data['teams_per_player'] * data['player_count']} –∫–æ–º–∞–Ω–¥, –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

    elif data.get("state") == "awaiting_teams":
        data["teams"].append(text)
        expected = data["teams_per_player"] * data["player_count"]
        if len(data["teams"]) < expected:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ‚Ññ{len(data['teams'])+1}:")
        else:
            random.shuffle(data["teams"])
            assigned = {}
            idx = 0
            for name in data["names"]:
                assigned[name] = data["teams"][idx:idx+data["teams_per_player"]]
                idx += data["teams_per_player"]
            data["assigned_teams"] = assigned
            data["removed_teams"] = {name: [] for name in data["names"]}
            data["state"] = "showing_result"
            text = format_result(data)
            keyboard = [
                [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="remove_command")],
                [InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)

    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

def format_result(data):
    lines = []
    for name in data["names"]:
        assigned = data["assigned_teams"].get(name, [])
        removed = data["removed_teams"].get(name, [])
        parts = []
        for cmd in assigned:
            if cmd in removed:
                parts.append(f"({cmd} - —É–¥–∞–ª–µ–Ω–∞)")
            else:
                parts.append(cmd)
        lines.append(f"{name}: {', '.join(parts)}")
    return "\n".join(lines)

if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)

    TOKEN = "8038319230:AAFX0CnfUIPUztntVmVenoVbqFz8dyYDGqo"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()